set $dummy_set "";
set_by_lua_block $dummy_set {
	local clogger     = require "bunkerweb.logger"
	local helpers     = require "bunkerweb.helpers"
	local cdatastore  = require "bunkerweb.datastore"
	local ccachestore = require "bunkerweb.cachestore"

	local ngx = ngx
	local ngx_req = ngx.req
	local is_internal = ngx_req.is_internal
	local ERR = ngx.ERR
	local INFO = ngx.INFO
	local fill_ctx = helpers.fill_ctx
	local save_ctx = helpers.save_ctx
	local require_plugin = helpers.require_plugin
	local new_plugin = helpers.new_plugin
	local call_plugin = helpers.call_plugin
	local tostring = tostring

	-- Don't process internal requests
	local logger      = clogger:new("SET")
	if is_internal() then
		logger:log(INFO, "skipped set phase because request is internal")
		return true
	end

	-- Start set phase
	local datastore = cdatastore:new()
	logger:log(INFO, "set phase started")

	-- Update cachestore only once and before any other code
	local cachestore = ccachestore:new(false)
	local ok, err = cachestore:update()
	if not ok then
		logger:log(ERR, "can't update cachestore : " .. err)
	end

	-- Fill ctx
	logger:log(INFO, "filling ngx.ctx ...")
	local ok, ret, errors, ctx = fill_ctx()
	if not ok then
		logger:log(ERR, "fill_ctx() failed : " .. ret)
	elseif errors then
		for i, error in ipairs(errors) do
			logger:log(ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
		end
	end
	logger:log(INFO, "ngx.ctx filled (ret = " .. ret .. ")")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call set() methods
	logger:log(ngx.INFO, "calling set() methods of plugins ...")
	for i, plugin_id in ipairs(order.set) do
		-- Require call
		local plugin_lua, err = require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ERR, err)
		elseif plugin_lua == nil then
			logger:log(INFO, err)
		else
			-- Check if plugin has set method
			if plugin_lua.set ~= nil then
				-- New call
				local ok, plugin_obj = new_plugin(plugin_lua, ctx)
				if not ok then
					logger:log(ERR, plugin_obj)
				else
					local ok, ret = call_plugin(plugin_obj, "set")
					if not ok then
						logger:log(ERR, ret)
					elseif not ret.ret then
						logger:log(ERR, plugin_id .. ":set() call failed : " .. ret.msg)
					else
						logger:log(INFO, plugin_id .. ":set() call successful : " .. ret.msg)
					end
				end
			else
				logger:log(INFO, "skipped execution of " .. plugin_id .. " because method set() is not defined")
			end
		end
	end
	logger:log(INFO, "called set() methods of plugins")

	-- Save ctx
	save_ctx(ctx)

	return true
}
